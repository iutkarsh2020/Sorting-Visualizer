{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  const n = array.length;\n  const arr = array.slice();\n  for (let i = 0; i < n - 1; i++) {\n    let swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      // this push is for highlighting\n      animations.push([j, j + 1]);\n      // this push is for removing highlight\n      animations.push([j, j + 1]);\n      if (arr[j] > arr[j + 1]) {\n        // Swap arr[j] and arr[j+1]\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        swapped = true;\n      }\n    }\n    // in case swapper or not we will put these values to the new array\n    animations.push([j, arr[j]]);\n    animations.push([j + 1, arr[j + 1]]);\n\n    // If no two elements were\n    // swapped by inner loop, then break\n    if (swapped == false) break;\n  }\n  return animations;\n}","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getBubbleSortAnimations","n","arr","swapped","temp"],"sources":["/Users/utkarshsharma/Desktop/Proj/Sorting-Visualizer-Tutorial/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  const n = array.length;\n  const arr = array.slice();\n  for (let i = 0; i < n - 1; i++) {\n    let swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      // this push is for highlighting\n      animations.push([j, j + 1]);\n      // this push is for removing highlight\n      animations.push([j, j + 1]);\n      if (arr[j] > arr[j + 1]) {\n\n        // Swap arr[j] and arr[j+1]\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        swapped = true;\n      }\n    }\n    // in case swapper or not we will put these values to the new array\n    animations.push([j, arr[j]]);\n    animations.push([j + 1, arr[j + 1]]);\n\n    // If no two elements were\n    // swapped by inner loop, then break\n    if (swapped == false)\n      break;\n  }\n  return animations;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}